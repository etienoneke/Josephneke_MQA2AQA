{
	"info": {
		"_postman_id": "196a2cbb-8a9a-4f42-95d3-a41141b1a6de",
		"name": "Automated API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14285345",
		"_collection_link": "https://seamfix.postman.co/workspace/Team-Workspace~c0248673-ed25-4080-8350-c9d1021f9ee3/collection/14285345-196a2cbb-8a9a-4f42-95d3-a41141b1a6de?action=share&source=collection_link&creator=14285345"
	},
	"item": [
		{
			"name": "2_User infornation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the response body as JSON",
							"const response = pm.response.json();",
							"",
							"// Check if the \"firstname\" and \"lastname\" keys exist in the response body",
							"pm.test(\"Response body should contain 'firstname' and 'lastname'\", function () {",
							"    pm.expect(response).to.have.property('data');",
							"    pm.expect(response.data).to.have.property('firstname');",
							"    pm.expect(response.data).to.have.property('lastname');",
							"});",
							"",
							"// Check the values of \"firstname\" and \"lastname\"",
							"pm.test(\"Values of 'firstname' and 'lastname' should be correct\", function () {",
							"    pm.expect(response.data.firstname).to.equal(\"Etieno\");",
							"    pm.expect(response.data.lastname).to.equal(\"Neke\");",
							"});",
							"",
							"//check response code",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//check response message",
							"pm.test(\"Response Message should be OK\", function () {",
							"    pm.expect(pm.response.to.have.status(\"OK\"));",
							"});",
							"",
							"//Set global variable",
							"pm.globals.set(\"firstname\", response.data.firstname);",
							"pm.globals.set(\"lastname\", response.data.lastname);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstname\": \"Etieno\",\n    \"lastname\": \"Neke\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}post",
					"host": [
						"{{baseURL}}post"
					]
				}
			},
			"response": []
		},
		{
			"name": "1_User Information",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the response body as JSON",
							"const response = pm.response.json();",
							"",
							"// Check if the \"firstname\" and \"lastname\" keys exist in the response body",
							"pm.test(\"Response body should contain 'firstname' and 'lastname'\", function () {",
							"    pm.expect(response).to.have.property('args');",
							"    pm.expect(response.args).to.have.property('firstname');",
							"    pm.expect(response.args).to.have.property('lastname');",
							"});",
							"",
							"// Check the values of \"firstname\" and \"lastname\"",
							"pm.test(\"Values of 'firstname' and 'lastname' should be correct\", function () {",
							"    pm.expect(response.args.firstname).to.equal(\"Etieno\");",
							"    pm.expect(response.args.lastname).to.equal(\"Neke\");",
							"});",
							"",
							"//check response code",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//check response message",
							"pm.test(\"Response Message should be OK\", function () {",
							"    pm.expect(pm.response.to.have.status(\"OK\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}get?firstname={{firstname}}&lastname={{lastname}}",
					"host": [
						"{{baseURL}}get"
					],
					"query": [
						{
							"key": "firstname",
							"value": "{{firstname}}"
						},
						{
							"key": "lastname",
							"value": "{{lastname}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "3_basic_authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check if the Authorization header exists",
							"pm.test(\"Authorization header should exist\", function () {",
							"    pm.request.to.have.header(\"Authorization\");",
							"});",
							"",
							"// Extract the Authorization header value",
							"const authHeader = pm.request.headers.get(\"Authorization\");",
							"",
							"// Check if the Authorization header has the expected value",
							"pm.test(\"Authorization header should have the correct value\", function () {",
							"    pm.expect(authHeader).to.equal(\"Basic cG9zdG1hbjpwYXNzd29yZA==\");",
							"});",
							"",
							"//Check if response code is 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Parse the response body as JSON",
							"const responseBodyData = pm.response.json();",
							"",
							"// Check if the \"authenticated\" key exists in the response body",
							"pm.test(\"Response body should contain 'authenticated': true\", function () {",
							"    pm.expect(responseBodyData.authenticated).to.equal(true);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "{{userName}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}basic-auth",
					"host": [
						"{{baseURL}}basic-auth"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://postman-echo.com/",
			"type": "string"
		},
		{
			"key": "userName",
			"value": "postman",
			"type": "string"
		},
		{
			"key": "password",
			"value": "password",
			"type": "string"
		}
	]
}